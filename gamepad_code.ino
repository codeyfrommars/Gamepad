#include <Keyboard.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// OLED settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32

#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// OLED bitmaps
// 'pop cat1', 43x32px
const unsigned char popCat1 [] PROGMEM = {
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x30, 0x00, 0x00, 0x60, 0xc0, 0x00, 0x0c, 
  0x00, 0x01, 0x9e, 0x40, 0x00, 0x03, 0x00, 0x06, 0x7e, 0x40, 0x00, 0x00, 0xc0, 0x38, 0xfe, 0x80, 
  0x00, 0x00, 0x31, 0xf1, 0xfc, 0x80, 0x00, 0x00, 0x0f, 0xf3, 0xfb, 0x00, 0x00, 0x00, 0x0f, 0xf0, 
  0xe6, 0x00, 0x00, 0x00, 0x0c, 0xf8, 0x2e, 0x00, 0x00, 0x00, 0x06, 0x1c, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0x18, 0x00, 0x00, 0x07, 0x80, 0x00, 0x98, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x88, 0x00, 
  0x00, 0x7f, 0xe0, 0x01, 0xcc, 0x00, 0xff, 0xff, 0xf0, 0x31, 0x42, 0x00, 0xff, 0xff, 0xf8, 0x10, 
  0x82, 0x00, 0xff, 0xff, 0xf8, 0x10, 0x02, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x02, 0x00, 0xff, 0xff, 
  0xfc, 0x00, 0x02, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x01, 0x00, 0xff, 0xff, 0xfc, 0x24, 0x00, 0x80, 
  0xff, 0xff, 0xfc, 0x24, 0x40, 0x40, 0xff, 0xff, 0xfe, 0x10, 0xaf, 0x20, 0xff, 0xff, 0xfe, 0x10, 
  0x4f, 0xa0, 0xff, 0xff, 0xc1, 0x00, 0x00, 0x40, 0xff, 0xf8, 0x3c, 0x80, 0xff, 0x80, 0xfe, 0x07, 
  0xc2, 0x01, 0x00, 0x00, 0xff, 0xf8, 0x01, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00
};
// 'pop cat2', 43x32px
const unsigned char popCat2 [] PROGMEM = {
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0xc0, 0x00, 0x00, 
  0x7c, 0x80, 0x00, 0x30, 0x00, 0x01, 0xc0, 0x80, 0x00, 0x0c, 0x00, 0x02, 0x3c, 0x80, 0x00, 0x03, 
  0x00, 0x1c, 0xfc, 0x80, 0x00, 0x00, 0xc0, 0x31, 0xfd, 0x00, 0x00, 0x00, 0x21, 0xf3, 0xf9, 0x00, 
  0x00, 0x00, 0x1f, 0xf3, 0xe2, 0x00, 0x00, 0x00, 0x07, 0x38, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x48, 0x00, 0x00, 0x01, 0xc1, 0xf0, 0x64, 0x00, 0x00, 0x03, 0xc3, 0xfc, 0x24, 0x00, 
  0x03, 0xff, 0x87, 0xfe, 0x22, 0x00, 0xff, 0xff, 0x87, 0xfe, 0x02, 0x00, 0xff, 0xff, 0x8f, 0xff, 
  0x02, 0x00, 0xff, 0xff, 0x9f, 0xff, 0x82, 0x00, 0xff, 0xff, 0x9f, 0xff, 0xa2, 0x00, 0xff, 0xff, 
  0x9f, 0xff, 0xa3, 0x00, 0xff, 0xff, 0x9f, 0xff, 0x83, 0x80, 0xff, 0xff, 0x9f, 0xff, 0x83, 0x40, 
  0xff, 0xff, 0x9f, 0xff, 0x88, 0xa0, 0xff, 0xff, 0x8f, 0xff, 0x98, 0x20, 0xff, 0xf0, 0x4f, 0xff, 
  0x01, 0xc0, 0xff, 0xcf, 0xc7, 0xfe, 0x1e, 0x00, 0xf8, 0x38, 0x21, 0xfc, 0x20, 0x00, 0xff, 0xc0, 
  0x10, 0x78, 0x40, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00
};
// 'sakura1', 128x32px
const unsigned char sakura1 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc9, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcf, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3e, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x3a, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xc6, 0x00, 0x07, 0x1c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xc7, 0x80, 0x01, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0x80, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x00, 0xb8, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe1, 0x00, 0x40, 0x00, 0x9c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x60, 0xc0, 0x40, 0x00, 0xb8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x3c, 0x60, 0x40, 0x00, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x43, 0xf0, 0x37, 0x00, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x18, 0x1e, 0x00, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x60, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x11, 0xc0, 0x60, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0xf9, 0x00, 0x30, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1f, 0xfe, 0x00, 0x38, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xec, 0x03, 0xc0, 0x1c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdc, 0x00, 0x70, 0x1c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x30, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8
};
// 'sakura2', 128x32px
const unsigned char sakura2 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x58, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0xd8, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0xed, 0x60, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x80, 0x18, 0x02, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x08, 0x02, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0xb8, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x87, 0x44, 0x01, 0x60, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xc0, 0xc0, 0x40, 0x01, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x38, 0x40, 0x20, 0x01, 0x90, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x47, 0xe0, 0x11, 0x81, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x80, 0x18, 0x13, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x0e, 0x23, 0x00, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x07, 0xb2, 0x00, 0x60, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xfc, 0x00, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1f, 0xcf, 0x00, 0x38, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x01, 0xe0, 0x38, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb2, 0x00, 0x00, 0x07, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc4, 0x00, 0x00, 0x00, 0x78, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0
};




// 'snow flake', 3x3px
const unsigned char flake [] PROGMEM = {
  0x40, 0xa0, 0x40
};

// matrix settings
#define ROW_SIZE 5
#define COL_SIZE 6
#define R0 4
#define R1 5
#define R2 6
#define R3 7
#define R4 8
#define C0 21
#define C1 20
#define C2 19
#define C3 18
#define C4 15
#define C5 14

#define MOD_ROW 2
#define MOD_COL 0

// Matrix
const byte cols[] = {C0, C1, C2, C3, C4, C5};
const byte rows[] = {R0, R1, R2, R3, R4};
const char matrix[ROW_SIZE][COL_SIZE] = {
  {KEY_ESC, '1', '2', '3', '4', '5'},
  {KEY_TAB, 'q', 'w', 'e', 'r', 't'},
  {0, 'a', 's', 'd', 'f', 'g'},
  {KEY_LEFT_SHIFT, 'z', 'x', 'c', 'v', 'b'},
  {0, 0, 0, KEY_LEFT_CTRL, KEY_LEFT_ALT, ' '}
};
const char matrixMod[ROW_SIZE][COL_SIZE] = { //modifier key
  {KEY_ESC, KEY_F1, KEY_F2, KEY_F3, KEY_F4, KEY_F5},
  {KEY_TAB, 'q', 'w', KEY_UP_ARROW, 'y', 'u'},
  {0 , 'a', KEY_LEFT_ARROW, KEY_DOWN_ARROW, KEY_RIGHT_ARROW, 'j'},
  {KEY_LEFT_SHIFT, 'z', 'x', 'c', 'n', 'm'},
  {0, 0, 0, ',', '.', KEY_BACKSPACE}
};

bool matrixState[ROW_SIZE][COL_SIZE] = {0}; // 1 is pressed, 0 if not
volatile byte pressFlag = 0;
volatile byte pressFlag2 = 0;
bool sakuraFlag = 0;
byte sakuraTime = 0;
#define POPTIME 1 // in frames

#define NUMFLAKES 10
byte flakes[NUMFLAKES][3]; // snowflakes array

void setup() {
  Serial.begin(9600);
  //while (!Serial); // Leonardo: wait for serial monitor
  Keyboard.begin();
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  matrixInit();
  snowInit();
}

void loop() {
  display.clearDisplay();
  drawSnow();
  drawPopcat();
  drawSakura();
  display.display(); // one loop takes ~50ms
  delay(80);
}

void drawSakura() {
  if (sakuraFlag) {
    display.drawBitmap(0, 0, sakura1, 128, 32, SSD1306_WHITE);
  } else {
    display.drawBitmap(0, 0, sakura2, 128, 32, SSD1306_WHITE);
  }
  if (sakuraTime-- <= 0) {
    sakuraFlag ^= 1;
    sakuraTime = 5;
  }
  
}

void drawPopcat() {
  if (pressFlag){
    if (pressFlag2) {
      display.drawBitmap(0, 0, popCat2, 43, 32, SSD1306_WHITE);
      pressFlag2--;
    } else {
      display.drawBitmap(0, 0, popCat1, 43, 32, SSD1306_WHITE);
      pressFlag--;
    }
  } else {
    display.drawBitmap(0, 0, popCat1, 43, 32, SSD1306_WHITE);
  }
}

void snowInit() {
  for (byte i = 0; i < NUMFLAKES; ++i) {
    flakes[i][0]   = random(display.width(), 2 * display.width()); // XPOS
    flakes[i][1]   = random(1 - 3, display.height()); // YPOS
    flakes[i][2] = random(1, 2); // SPEED
  }
}

void drawSnow() {
  for (byte i = 0; i < NUMFLAKES; ++i) { // draw each snowflake
    display.drawBitmap(flakes[i][0], flakes[i][1], flake, 3, 3, SSD1306_WHITE);
  }
  for (byte i = 0; i < NUMFLAKES; ++i) { // update snowflake coordinates
    flakes[i][0] -= flakes[i][2];
      // If snowflake is off the bottom of the screen...
    if (flakes[i][0] <= 0) {
      // Reinitialize to a random position, just off the top
      flakes[i][0]   = display.width(); // XPOS
      flakes[i][1]   = random(1 - 3, display.height()); // YPOS
      flakes[i][2] = random(1, 2); // SPEED
    }
  }
}

void matrixInit() {
  // init column inputs
  for (byte c = 0; c < COL_SIZE; ++c) {
    pinMode(cols[c], INPUT_PULLUP);
  }
  // init row outputs
  for (byte r = 0; r < ROW_SIZE; ++r) {
    pinMode(rows[r], OUTPUT);
    digitalWrite(rows[r], HIGH);
  }

  // set up interrupt
  TCCR1A = 0; // reset timer1 control reg A
  TCCR1B &= ~(1 << WGM13); // set CTC mode
  TCCR1B |= (1 << WGM12);
  TCCR1B &= ~(1 << CS12); // no prescale
  TCCR1B &= ~(1 << CS11);
  TCCR1B |= (1 << CS10);
  TCNT1 = 0; // reset timer1 and set compare value
  OCR1A = 8000; // 8000 clock cycles @ 16MHz = 500 us
  TIMSK1 = (1 << OCIE1A); // enable timer1 compare interrupt
  sei();
}

ISR(TIMER1_COMPA_vect) // matrixScan
{
  for (byte r = 0; r < ROW_SIZE; ++r) {
    digitalWrite(rows[r], LOW);
    delayMicroseconds(5);
    for (byte c = 0; c < COL_SIZE; ++c) { //traverse cols
      if (digitalRead(cols[c]) == LOW) {
        if (!matrixState[r][c])
          keyPress(r, c);
      } else if (matrixState[r][c]) {
        keyRelease(r, c);
      }
    }
    digitalWrite(rows[r], HIGH);
    delayMicroseconds(5);
  }
}

void keyPress(byte r, byte c) {
  if (r == MOD_ROW && c == MOD_COL) {
  } else if (matrixState[MOD_ROW][MOD_COL]) {
    Keyboard.press(matrixMod[r][c]);
  } else {
    Keyboard.press(matrix[r][c]);
  }
  if (pressFlag == 0) {
    pressFlag = pressFlag2 = POPTIME;
  }
  matrixState[r][c] = 1;
}

void keyRelease(byte r, byte c) {
  if (r == MOD_ROW && c == MOD_COL) {
  } else {
    Keyboard.release(matrixMod[r][c]);
    Keyboard.release(matrix[r][c]);
  }
  matrixState[r][c] = 0;
}
